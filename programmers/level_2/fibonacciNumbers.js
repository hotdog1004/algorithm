/**
 * 피보나치 수
 * @param {number} n
 * @returns {number}
 * 피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다
 * 예를 들어
 * F(2) = F(0) + F(1) = 0 + 1 = 1
 * F(3) = F(1) + F(2) = 1 + 1 = 2
 * F(4) = F(2) + F(3) = 1 + 2 = 3
 * F(5) = F(3) + F(4) = 2 + 3 = 5
 * 와 같이 이어집니다.
 * 2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.
 * [제한 사항]
 * n은 2 이상 100,000 이하인 자연수입니다.
 */

// 단순하게 재귀를 사용해서 풀었더니 런타임에러, 시간초과로 인해 실패
// [추가 설명]
// 피보나치 수열은 재귀함수의 활용이나 동적 계획법을 연습하는 데 흔히 쓰인다.
// n이 매우 큰 경우 n번째 피보나치 수는 언어가 표현할 수 있는 자료형의 범위를 넘어가, 오버플로우가 발생한다.
// 예를 들어
// 47번째 피보나치 수는 2,971,215,073이고, 이 수는 32비트 정수(ex. int) 범위를 넘어 오버플로우가 발생한다.
// 100,000번째 피보나치 수는 자릿수가 20,000을 넘어가며, 이는 64비트 정수(ex. long) 범위를 넘어 오버플로우가 발생한다.
// 💡그럼 코드를 어떻게 바꾸면 좋을까?
// 모든 단계에서 % 연산을 사용하여, 모든 연산에서 오버플로우가 일어나지 않게 만들어주면 된다.
function solution(n) {
  const cache = Array.from({ length: n });
  cache[0] = 0;
  cache[1] = 1;
  for (let i = 2; i <= n; i++) {
    cache[i] = (cache[i - 1] % 1234567) + (cache[i - 2] % 1234567);
  }

  return cache[n] % 1234567;
}

console.log(solution(77));
