/**
 * 최대 부분 증가수열(LIS)
 * @param {number[]} arr
 * @return {number}
 * N개의 자연수로 이루어진 수열이 주어졌을 때, 그 중에서 가장 길게 증가하는(작은 수에서 큰수 로) 원소들의 집합을 찾는 프로그램을 작성하라.
 * 예를 들어, 원소가 2, 7, 5, 8, 6, 4, 7, 12, 3 이면 가장 길게 증가하도록 원소들을 차례대로 뽑아내면 2, 5, 6, 7, 12를 뽑아내어
 * 길이가 5인 최대 부분 증가수열을 만들 수 있다.
 */
// 순서를 유지하고...뽑아내라 ?

function solution(arr) {
  // dy 배열을 만들기.
  // dy[i]의 원소 :  arr[i]의 원소에 해당하는 숫자의 최대 증가수열의 길이값
  // i번째 앞의 항들을 따져보기.
  // i = n이면
  // j = i-1 ~0 까지 돌면서 탐색(arr[i]번째 숫자보다 작은 게 있는지 찾기. 만약에 없다면 자기자신 혼자니까 1이됨)
  // 만약 앞에 올 수 있는 항이 여러개라면? 가장 긴걸로...즉 dy에서 원소 찾앗을 떄 큰 값 +1
  // 마지막 숫자가 내가 만드는 증가수열의 마지막 항이면서 최대 길이 된다는 보장은 없다.
  let answer = 0;
  let dy = Array.from({ length: arr.length }, () => 0);
  dy[0] = 1; // 첫번째 원소는 무조건 1이니까(앞에 숫자가 없으니 첫번째임) 초기화해주기
  for (let i = 1; i < arr.length; i++) {
    let max = 0; // 이거 왜 필요하니 -> 앞에 나보다 작은 숫자가 없을 경우 +1 해줘야하니까 0으로 초기화.
    for (let j = i - 1; j >= 0; j--) {
      if (arr[j] < arr[i] && dy[j] > max) {
        max = dy[j]; // 앞에 나보다 작은 숫자가 있고 그 중에서도 최대 증가수열을 뽑아내기 위해 저런 조건을 걸어줌
      }
    }
    dy[i] = max + 1;
    answer = Math.max(answer, dy[i]);
  }
  return answer;
}

const arr = [5, 3, 7, 8, 6, 2, 9, 4];
console.log(solution(arr));
